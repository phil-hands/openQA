% my $build = $job->BUILD;
% my $step_url = url_for('step')->to_abs;
% my $module = stash('moduleid');
% my $step = stash('stepid');
% if ($step) {
%     $step_url = url_for('step', moduleid => $module, stepid => $step)->to_abs;
% }
% my %product_details = ();
% my $scenario_description = $job->scenario_description // '';

<% my %distri_to_product_url_new = (
    sle => 'https://bugzilla.suse.com/enter_bug.cgi',
    'sle-micro' => 'https://bugzilla.suse.com/enter_bug.cgi',
    opensuse => 'https://bugzilla.opensuse.org/enter_bug.cgi',
    caasp => 'https://bugzilla.suse.com/enter_bug.cgi',
    openqa => 'https://progress.opensuse.org/projects/openqav3/issues/new',
    kubic => 'https://bugzilla.opensuse.org/enter_bug.cgi',
    microos => 'https://bugzilla.opensuse.org/enter_bug.cgi',
);%>
<% my %distri_to_prod = (
    sle => 'SUSE Linux Enterprise',
    'sle-micro' => 'SUSE Linux Enterprise',
    opensuse => 'openSUSE',
    caasp => 'SUSE CaaS Platform',
    kubic => 'openSUSE',
    microos => 'openSUSE',
); %>
<% my %flavor_to_prod_sle = (
    Server => 'Server',
    'Server-Incidents' => 'Server',
    'Server-Updates' => 'Server',
    'Server-HA' => 'High Availability Extension',
    'Server-RT' => 'Real Time Extension',
    Desktop => 'Desktop',
    'Desktop-Incidents' => 'Desktop',
    'Desktop-Updates' => 'Desktop',
    SAP => 'for SAP Applications',
    Leanos => 'Server',
    Installer => 'Server',
); %>
<% my %public_sle_products = (
    Server => 'Server',
    Desktop => 'Desktop',
    'High Availability Extension' => 'High Availability', # the public version leaves out the "Extension" suffix
); %>
% my $raw_distri = $job->DISTRI;
% my $distri = $distri_to_prod{$raw_distri} // 'DISTRI NOT FOUND: Adjust templates/openSUSE/external_reporting.html.ep';
% my $product = '';
% if ($raw_distri eq 'sle') {
%     my $subproduct = $job->FLAVOR =~ s/(\w*)(-\w*)?/$1/r;
%     if ($subproduct) {
%         my $version = $job->VERSION =~ s/-/ /r;
%         if ($subproduct eq 'Server' && $version eq '12') {
%             $version = '12 (SLES 12)';
%         }
%         if ($subproduct eq 'Desktop-Updates' && $version eq '12 SP1') {
%             $version = "12 SP1\x{00A0}(SLED 12 SP1)";
%         }
%         # fall back to 'Server' as the most common flavor
%         my $sle_product        = $flavor_to_prod_sle{$subproduct} // 'Server';
%         my $public_sle_product = $public_sle_products{$sle_product};
%         if ($public_sle_product && ($version =~ qr/(\d+) SP(\d+)/)) {
%             if ($1 == 15 && $2 >= 3) {
%                 $distri      = "PUBLIC $distri" ;
%                 $sle_product = $public_sle_product;
%             }
%         }
%         $product = "$sle_product $version";
%     }
% }
% elsif ($raw_distri eq 'sle-micro') {
%     $product = 'Micro';
% }
% elsif ($raw_distri eq 'opensuse' || $raw_distri eq 'microos') {
%     $product = $job->VERSION eq 'Tumbleweed' ? 'Tumbleweed' : 'Distribution';
% }
% elsif ($raw_distri eq 'caasp') {
%     $product = $job->VERSION =~ s/\.[0-9]//r;
% }
% elsif ($raw_distri eq 'openqa') {
%     $product = 'openQA';
% }

% sub build_link {
%     my ($job) = @_;
%     return '[' . $job->BUILD . '](' . url_for('test', testid => $job->id)->to_abs .  ')';
% }
% my $scenario = $job->scenario_name;
% my $first_known_bad = build_link($job) . ' (current job)';
% my $last_good = '(unknown)';
% for my $prev ($job->_previous_scenario_jobs) {
%     if ($prev->result =~ '(passed|softfailed)') {
%         $last_good = build_link($prev);
%         last;
%     }
%     $first_known_bad = build_link($prev);
% }
% my $latest = url_for('latest')->query($job->scenario_hash)->to_abs;
<% my $description = "## Observation

openQA test in scenario $scenario fails in
[$module]($step_url)

## Test suite description
$scenario_description


## Reproducible

Fails since (at least) Build $first_known_bad


## Expected result

Last good: $last_good (or more recent)


## Further details

Always latest result in this scenario: [latest]($latest)
"; %>

% if ($product eq 'openQA') {
%    $product_details{'issue[subject]'} = "test fails in $module";
%    $product_details{'issue[description]'} = $description;
% }
% else {
%    $product_details{short_desc} = "[Build $build] openQA test fails in $module";
%    $product_details{comment} = $description;
%    $product_details{product} = "$distri $product";
%    $product_details{bug_file_loc} = $step_url;
%    $product_details{cf_foundby} = 'openQA';
%    $product_details{cf_blocker} = 'Yes';
% }
% if ($distri eq 'kubic') {
%    $product_details{component} = 'Kubic';
% }
% my $product_url_new = $distri_to_product_url_new{$raw_distri};
% if ($product) {
    %= stepaction_for('Report product bug' => url_for($product_url_new)->query(%product_details), 'fa-bug', 'report product_bug');
% }
<% my %test_issue_params = (
    'issue[subject]' => "test fails in $module",
    'issue[description]' => $description,
    'issue[category_id]' => 152,
); %>
% my $test_url_new = 'https://progress.opensuse.org/projects/openqatests/issues/new';
%= stepaction_for('Report test issue' => url_for($test_url_new)->query(%test_issue_params), 'fa-bolt', 'report test_issue');
