#!/bin/bash

#
# perltidy rules can be found in ../.perltidyrc
#
usage() {
    cat << EOF
Usage:
 tidy [--check] [--only-changed]

Options:
 -h, -?, --help       display this help
 -c, --check          Only check for style check differences
 -o --only-changed    Only tidy files with uncommitted changes in git. This can
                      speed up execution a lot.

perltidy rules can be found in .perltidyrc
EOF
    exit
}

set -eo pipefail

args=""
mapfile -t files < <(file --mime-type -- script/* | (grep text/x-perl || true) | awk -F':' '{ print $1 }')
files+=('**.p[ml]' '**.t')
selection="$(git ls-files "${files[@]}")"
opts=$(getopt -o hcol --long help,check,only-changed,list -n "$0" -- "$@") || usage
eval set -- "$opts"
while true; do
  case "$1" in
    -h | --help ) usage; shift ;;
    -c | --check ) args+=' --check-only'; shift ;;
    -o | --only-changed ) selection='--git'; shift ;;
    -l | --list ) args+='--list'; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

shift $((OPTIND - 1))
filename=${*:-"$selection"}

if ! command -v perltidy > /dev/null 2>&1; then
    echo "No perltidy found, install it first!"
    exit 1
fi

# cpan file is in top directory
dir="$(dirname "$(readlink -f "$0")")/.."
perltidy_version_found=$(perltidy -version | sed -n '1s/^.*perltidy, v\([0-9]*\)\s*$/\1/p')
perltidy_version_expected=$(sed -n "s/^.*Tidy[^0-9]*\([0-9]*\)['];$/\1/p" "$dir"/cpanfile)
if [ "$perltidy_version_found" != "$perltidy_version_expected" ]; then
    echo "Wrong version of perltidy. Found '$perltidy_version_found', expected '$perltidy_version_expected'"
    exit 1
fi

# go to caller directory
cd "$(dirname "$0")/.."

# just to make sure we are at the right location
test -e tools/tidy || exit 1

# shellcheck disable=SC2086
tidyall $args $filename
